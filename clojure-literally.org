* What is this?
  clojure-literally is a new style of learning resource. It combines
  traditional publication, website contents and actually executable
  code.

  You can think of clojure-literally as an interactive book about
  programming with Clojure.

  This is work in progress and not considered to be a released version
  yet. Nevertheless it is being created and developed in the public
  from the beginning on. Ideally this will become a community effort
  with many contributors. Don't be shy, please get in touch if you
  want to help with it. Pull requests, as well as any bug reports,
  wishes, suggestions and so on are very welcome.

** How to use clojure-literally
   clojure-literally is a [[https://en.wikipedia.org/wiki/Literate_programming][literate programming]] (LP) project, based on
   [[https://www.gnu.org/software/emacs/][Emacs]] and [[http://orgmode.org][Org mode]]. To make best use of it, you should setup those
   tools and interact with the code throughout the documents.

   If you don't want to get into these tools, you can still consume
   clojure-literally like you would read any other book or website
   about programming. However, I would like to encourage you to at
   least try out Emacs + Org mode. Many users became really
   enthusiastic about it and this goes far beyond being a great
   Clojure environment and being able to run clojure-literally.

** TODO Provide complete setup instructions for LP
** TODO Provide LP usage instructions
* Chapters
** The Clojure Progamming Language
*** Basic Clojure Lessons
*** Advanced Clojure Lessons
** Clojure Libraries
*** Components
*** Compojure
*** Schema
** Logic Programming
   - [[file:chapters/logic/index.org][Logic Programming with Clojure's core.logic]]
** Development Tools
* Web Resources
** Function documentation and examples
   - [[https://clojuredocs.org/][ClojureDocs]] is a community-powered documentation and examples
   repository
** Style Guide
   - Best practices and guidance for how to structure and format your
     Clojure code https://github.com/bbatsov/clojure-style-guide
** Chats
   - Clojurians on https://clojurians.slack.com, join via
     http://clojurians.net/
* Literate Programming (LP)
** Motivation
*** Why are programms split into files and folders?
*** Computers vs Humans
**** Reading Code > Writing Code
**** Humans first
     "Instead of imagining that our main task is to instruct a computer
     what to do, let us concentrate rather on explaining to human
     beings what we want a computer to do." - Donald Knuth
** What is LP and how is it different?
*** Approach
    - develop in the order of logic and flow of thoughts
    - write in ordinary language
    - include pseudocode-like macros to outline computer instructions
    - use source code snippets to implement the macro pseudocode
**** Example
     A simple example would be a basic Clojure namespace, outlined like
     this:
     #+BEGIN_SRC :noweb yes
     <<namespace-declaration>>
     <<private-functions>>
     <<public-functions>>
     #+END_SRC

     Namespaces are used to modularize and encapsulate Clojure
     code. The most basic declaration would be ~(ns
     my.namespace)~. Additional arguments would include for example
     dependencies of a namespace. As it is good practice to include a
     namespace, let us use the following namepsace declaration in this
     example:

     #+NAME namespace-declaration
     #+BEGIN_SRC clojure
     (ns com.futurice.lp-example
       "A dead simple namespace with functions of highly questionable value.")
     #+END_SRC

     #+NAME public-functions
     #+BEGIN_SRC clojure
     (defn foo [] (println "bar"))
     #+END_SRC
*** Capture thoughts and concepts
** Cons
* Contributors
  - [[http://nils-blum-oeste.net/][Nils Blum-Oeste]]
